{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { AbiError, InvalidBooleanError } from 'web3-errors';\nimport { toBool } from 'web3-utils';\nimport { WORD_SIZE } from '../utils.js';\nimport { decodeNumber, encodeNumber } from './number.js';\nexport function encodeBoolean(param, input) {\n  let value;\n\n  try {\n    value = toBool(input);\n  } catch (e) {\n    if (e instanceof InvalidBooleanError) {\n      throw new AbiError('provided input is not valid boolean value', {\n        type: param.type,\n        value: input,\n        name: param.name\n      });\n    }\n  }\n\n  return encodeNumber({\n    type: 'uint8',\n    name: ''\n  }, Number(value));\n}\nexport function decodeBool(_param, bytes) {\n  const numberResult = decodeNumber({\n    type: 'uint8',\n    name: ''\n  }, bytes);\n\n  if (numberResult.result > 1 || numberResult.result < 0) {\n    throw new AbiError('Invalid boolean value encoded', {\n      boolBytes: bytes.subarray(0, WORD_SIZE),\n      numberResult\n    });\n  }\n\n  return {\n    result: numberResult.result === BigInt(1),\n    encoded: numberResult.encoded,\n    consumed: WORD_SIZE\n  };\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA,SAASA,QAAT,EAAmBC,mBAAnB,QAA8C,aAA9C;AAEA,SAASC,MAAT,QAAuB,YAAvB;AAEA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,YAAT,EAAuBC,YAAvB,QAA2C,aAA3C;AAEA,OAAM,SAAUC,aAAV,CAAwBC,KAAxB,EAA6CC,KAA7C,EAA2D;EAChE,IAAIC,KAAJ;;EACA,IAAI;IACHA,KAAK,GAAGP,MAAM,CAACM,KAAD,CAAd;EACA,CAFD,CAEE,OAAOE,CAAP,EAAU;IACX,IAAIA,CAAC,YAAYT,mBAAjB,EAAsC;MACrC,MAAM,IAAID,QAAJ,CAAa,2CAAb,EAA0D;QAC/DW,IAAI,EAAEJ,KAAK,CAACI,IADmD;QAE/DF,KAAK,EAAED,KAFwD;QAG/DI,IAAI,EAAEL,KAAK,CAACK;MAHmD,CAA1D,CAAN;IAKA;EACD;;EAED,OAAOP,YAAY,CAAC;IAAEM,IAAI,EAAE,OAAR;IAAiBC,IAAI,EAAE;EAAvB,CAAD,EAA8BC,MAAM,CAACJ,KAAD,CAApC,CAAnB;AACA;AAED,OAAM,SAAUK,UAAV,CAAqBC,MAArB,EAA2CC,KAA3C,EAA4D;EACjE,MAAMC,YAAY,GAAGb,YAAY,CAAC;IAAEO,IAAI,EAAE,OAAR;IAAiBC,IAAI,EAAE;EAAvB,CAAD,EAA8BI,KAA9B,CAAjC;;EACA,IAAIC,YAAY,CAACC,MAAb,GAAsB,CAAtB,IAA2BD,YAAY,CAACC,MAAb,GAAsB,CAArD,EAAwD;IACvD,MAAM,IAAIlB,QAAJ,CAAa,+BAAb,EAA8C;MACnDmB,SAAS,EAAEH,KAAK,CAACI,QAAN,CAAe,CAAf,EAAkBjB,SAAlB,CADwC;MAEnDc;IAFmD,CAA9C,CAAN;EAIA;;EACD,OAAO;IACNC,MAAM,EAAED,YAAY,CAACC,MAAb,KAAwBG,MAAM,CAAC,CAAD,CADhC;IAENC,OAAO,EAAEL,YAAY,CAACK,OAFhB;IAGNC,QAAQ,EAAEpB;EAHJ,CAAP;AAKA","names":["AbiError","InvalidBooleanError","toBool","WORD_SIZE","decodeNumber","encodeNumber","encodeBoolean","param","input","value","e","type","name","Number","decodeBool","_param","bytes","numberResult","result","boolBytes","subarray","BigInt","encoded","consumed"],"sources":["C:\\Users\\Asus\\Desktop\\todolist-blockchain\\node_modules\\web3-eth-abi\\src\\coders\\base\\bool.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { AbiError, InvalidBooleanError } from 'web3-errors';\nimport { AbiParameter } from 'web3-types';\nimport { toBool } from 'web3-utils';\nimport { DecoderResult, EncoderResult } from '../types.js';\nimport { WORD_SIZE } from '../utils.js';\nimport { decodeNumber, encodeNumber } from './number.js';\n\nexport function encodeBoolean(param: AbiParameter, input: unknown): EncoderResult {\n\tlet value;\n\ttry {\n\t\tvalue = toBool(input);\n\t} catch (e) {\n\t\tif (e instanceof InvalidBooleanError) {\n\t\t\tthrow new AbiError('provided input is not valid boolean value', {\n\t\t\t\ttype: param.type,\n\t\t\t\tvalue: input,\n\t\t\t\tname: param.name,\n\t\t\t});\n\t\t}\n\t}\n\n\treturn encodeNumber({ type: 'uint8', name: '' }, Number(value));\n}\n\nexport function decodeBool(_param: AbiParameter, bytes: Uint8Array): DecoderResult<boolean> {\n\tconst numberResult = decodeNumber({ type: 'uint8', name: '' }, bytes);\n\tif (numberResult.result > 1 || numberResult.result < 0) {\n\t\tthrow new AbiError('Invalid boolean value encoded', {\n\t\t\tboolBytes: bytes.subarray(0, WORD_SIZE),\n\t\t\tnumberResult,\n\t\t});\n\t}\n\treturn {\n\t\tresult: numberResult.result === BigInt(1),\n\t\tencoded: numberResult.encoded,\n\t\tconsumed: WORD_SIZE,\n\t};\n}\n"]},"metadata":{},"sourceType":"module"}